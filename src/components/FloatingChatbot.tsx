// File: src/components/FloatingChatbot.tsx
import React, { useState, useEffect, useRef } from 'react';
import { 
  MessageCircle, 
  Send, 
  Bot, 
  User, 
  X,
  Minimize2,
  TreePine
} from 'lucide-react';

// ---------------- Multilingual Dataset ----------------
const dataset: Record<string, Record<string, string>> = {
  en: {
    hello: "Hello! Welcome to Jharkhand Tourism üå≤. Ask me anything about places, food, travel, or emergencies.",
    help: "I can help you with:\nüèûÔ∏è Tourist attractions\nüçõ Local food\nüå§Ô∏è Best time to visit\nüö® Emergency contacts (police/hospital)",
    emergency: "üö® Emergency detected!\n\nüöë City Hospital - 102\nüìç Near Main Square, Ranchi\n\nüëÆ Local Police Station - 100\nüìç Sector 10, Ranchi"
  },
  hi: {
    hello: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à üå≤‡•§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§∏‡•ç‡§•‡§≤, ‡§≠‡•ã‡§ú‡§®, ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ø‡§æ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
    help: "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å:\nüèûÔ∏è ‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§∏‡•ç‡§•‡§≤\nüçõ ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§≠‡•ã‡§ú‡§®\nüå§Ô∏è ‡§ò‡•Ç‡§Æ‡§®‡•á ‡§ï‡§æ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø\nüö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï (‡§™‡•Å‡§≤‡§ø‡§∏/‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤)",
    emergency: "üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤!\n\nüöë ‡§∏‡§ø‡§ü‡•Ä ‡§π‡•â‡§∏‡•ç‡§™‡§ø‡§ü‡§≤ - 102\nüìç ‡§Æ‡•á‡§® ‡§∏‡•ç‡§ï‡•ç‡§µ‡§æ‡§Ø‡§∞, ‡§∞‡§æ‡§Ç‡§ö‡•Ä\n\nüëÆ ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§∏‡•ç‡§ü‡•á‡§∂‡§® - 100\nüìç ‡§∏‡•á‡§ï‡•ç‡§ü‡§∞ 10, ‡§∞‡§æ‡§Ç‡§ö‡•Ä"
  },
  mr: {
    hello: "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§° ‡§™‡§∞‡•ç‡§Ø‡§ü‡§®‡§æ‡§§ ‡§Ü‡§™‡§≤‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ü‡§π‡•á üå≤. ‡§Æ‡§≤‡§æ ‡§∏‡•ç‡§•‡§≥‡•á, ‡§Ö‡§®‡•ç‡§®, ‡§™‡•ç‡§∞‡§µ‡§æ‡§∏ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ.",
    help: "‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã:\nüèûÔ∏è ‡§™‡§∞‡•ç‡§Ø‡§ü‡§® ‡§∏‡•ç‡§•‡§≥‡•á\nüçõ ‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§Ö‡§®‡•ç‡§®\nüå§Ô∏è ‡§≠‡•á‡§ü ‡§¶‡•á‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§ï‡§æ‡§≥\nüö® ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï (‡§™‡•ã‡§≤‡•Ä‡§∏/‡§∞‡•Å‡§ó‡•ç‡§£‡§æ‡§≤‡§Ø)",
    emergency: "üö® ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤!\n\nüöë ‡§∏‡§ø‡§ü‡•Ä ‡§π‡•â‡§∏‡•ç‡§™‡§ø‡§ü‡§≤ - 102\nüìç ‡§Æ‡•á‡§® ‡§∏‡•ç‡§ï‡•ç‡§µ‡•á‡§Ö‡§∞, ‡§∞‡§æ‡§Ç‡§ö‡•Ä\n\nüëÆ ‡§∏‡•ç‡§•‡§æ‡§®‡§ø‡§ï ‡§™‡•ã‡§≤‡•Ä‡§∏ ‡§∏‡•ç‡§ü‡•á‡§∂‡§® - 100\nüìç ‡§∏‡•á‡§ï‡•ç‡§ü‡§∞ 10, ‡§∞‡§æ‡§Ç‡§ö‡•Ä"
  },
  gu: {
    hello: "‡™®‡™Æ‡™∏‡´ç‡™§‡´á! ‡™ù‡™æ‡™∞‡™ñ‡™Ç‡™° ‡™™‡™∞‡´ç‡™Ø‡™ü‡™®‡™Æ‡™æ‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´Å‡™Ç ‡™∏‡´ç‡™µ‡™æ‡™ó‡™§ ‡™õ‡´á üå≤. ‡™∏‡´ç‡™•‡™≥‡´ã, ‡™ñ‡´ã‡™∞‡™æ‡™ï, ‡™™‡´ç‡™∞‡™µ‡™æ‡™∏ ‡™Ö‡™•‡™µ‡™æ ‡™Ü‡™™‡™§‡´ç‡™§‡™ø ‡™µ‡™ø‡™∂‡´á ‡™™‡´Ç‡™õ‡´ã.",
    help: "‡™π‡´Å‡™Ç ‡™Æ‡™¶‡™¶ ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´Å‡™Ç ‡™õ‡´Å‡™Ç:\nüèûÔ∏è ‡™™‡™∞‡´ç‡™Ø‡™ü‡™® ‡™∏‡´ç‡™•‡™≥‡´ã\nüçõ ‡™∏‡´ç‡™•‡™æ‡™®‡™ø‡™ï ‡™ñ‡´ã‡™∞‡™æ‡™ï\nüå§Ô∏è ‡™∂‡´ç‡™∞‡´á‡™∑‡´ç‡™† ‡™Æ‡´Å‡™≤‡™æ‡™ï‡™æ‡™§ ‡™∏‡™Æ‡™Ø\nüö® ‡™Ü‡™™‡™§‡´ç‡™§‡™ø ‡™∏‡™Ç‡™™‡™∞‡´ç‡™ï (‡™™‡´ã‡™≤‡´Ä‡™∏/‡™π‡´ã‡™∏‡´ç‡™™‡™ø‡™ü‡™≤)",
    emergency: "üö® ‡™Ü‡™™‡™§‡´ç‡™§‡™ø!\n\nüöë ‡™∏‡™ø‡™ü‡´Ä ‡™π‡´ã‡™∏‡´ç‡™™‡™ø‡™ü‡™≤ - 102\nüìç ‡™Æ‡´á‡™à‡™® ‡™∏‡´ç‡™ï‡´ç‡™µ‡´á‡™∞, ‡™∞‡™æ‡™Ç‡™ö‡´Ä\n\nüëÆ ‡™∏‡´ç‡™•‡™æ‡™®‡™ø‡™ï ‡™™‡´ã‡™≤‡´Ä‡™∏ ‡™∏‡´ç‡™ü‡´á‡™∂‡™® - 100\nüìç ‡™∏‡´á‡™ï‡´ç‡™ü‡™∞ 10, ‡™∞‡™æ‡™Ç‡™ö‡´Ä"
  }
};

// ---------------- Language Detection ----------------
const detectLanguage = (msg: string): keyof typeof dataset => {
  if (/‡§®‡§Æ‡§∏‡•ç‡§§‡•á|‡§Æ‡§¶‡§¶|‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤/.test(msg)) return "hi";
  if (/‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞|‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤/.test(msg)) return "mr";
  if (/‡™®‡™Æ‡™∏‡´ç‡™§‡´á|‡™Ü‡™™‡™§‡´ç‡™§‡™ø/.test(msg)) return "gu";
  return "en";
};

// ---------------- FAQ Database (tourism specific) ----------------
const faqDatabase = [
  { keywords: ["hundru", "waterfall"], response: "Hundru Falls is 322ft high, best from July-March üåäüì∏." },
  { keywords: ["betla", "tiger", "safari"], response: "Betla National Park üêÖ has tigers, elephants, and safaris from Oct-May." },
  { keywords: ["netarhat", "sunset"], response: "Netarhat üåÑ is called 'Queen of Chotanagpur'. Famous for sunrises/sunsets." },
  { keywords: ["food", "cuisine"], response: "Try Dhuska, Pittha, Mahua, Bamboo curry üçõ." },
  { keywords: ["safety"], response: "Jharkhand is generally safe üõ°Ô∏è. Emergency Helpline: 112" }
];

const FloatingChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! Welcome to Jharkhand Tourism üå≤. Ask me about tourist places, food, culture, or emergencies.",
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const chatEndRef = useRef<HTMLDivElement | null>(null);

  // Auto-scroll
  useEffect(() => {
    if (isOpen && !isMinimized) {
      setTimeout(() => {
        chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 50);
    }
  }, [messages, isTyping, isOpen, isMinimized]);

  // ---------------- Chat Logic ----------------
  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = { id: Date.now(), text: inputMessage, sender: 'user', timestamp: new Date() };
    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    await new Promise(r => setTimeout(r, 800));

    const lang = detectLanguage(userMessage.text);
    const lowerInput = userMessage.text.toLowerCase();
    let response = dataset[lang].help;

    if (lowerInput.includes("hello") || lowerInput.includes("hi") || lowerInput.includes("‡§®‡§Æ‡§∏‡•ç‡§§‡•á")) {
      response = dataset[lang].hello;
    } else if (lowerInput.includes("help") || lowerInput.includes("‡§Æ‡§¶‡§¶")) {
      response = dataset[lang].help;
    } else if (lowerInput.includes("emergency") || lowerInput.includes("‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤") || lowerInput.includes("‡™Ü‡™™‡™§‡´ç‡™§‡™ø")) {
      response = dataset[lang].emergency;
    } else {
      // Try matching FAQ
      for (const faq of faqDatabase) {
        if (faq.keywords.some(k => lowerInput.includes(k))) {
          response = faq.response;
          break;
        }
      }
    }

    const botMessage = { id: Date.now() + 1, text: response, sender: 'bot', timestamp: new Date() };
    setIsTyping(false);
    setMessages(prev => [...prev, botMessage]);
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <>
      {/* Floating Button */}
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 bg-green-600 hover:bg-green-700 text-white p-4 rounded-full shadow-2xl transition transform hover:scale-110"
        >
          <MessageCircle className="w-6 h-6" />
        </button>
      )}

      {/* Chat Window */}
      {isOpen && (
        <div className={`fixed bottom-6 right-6 bg-white rounded-2xl shadow-2xl ${isMinimized ? 'w-80 h-16' : 'w-96 h-[500px]'}`}>
          {/* Header */}
          <div className="bg-green-600 text-white p-3 rounded-t-2xl flex justify-between">
            <div className="flex items-center space-x-2">
              <TreePine className="w-5 h-5" />
              <span className="font-semibold text-sm">Jharkhand Assistant</span>
            </div>
            <div className="flex space-x-2">
              <button onClick={() => setIsMinimized(!isMinimized)}><Minimize2 size={16} /></button>
              <button onClick={() => setIsOpen(false)}><X size={16} /></button>
            </div>
          </div>

          {/* Chat Content */}
          {!isMinimized && (
            <>
              <div className="h-80 overflow-y-auto p-3 bg-gray-50">
                {messages.map(m => (
                  <div key={m.id} className={`flex ${m.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-xs px-3 py-2 rounded-lg text-sm ${m.sender === 'user' ? 'bg-green-600 text-white' : 'bg-white border shadow-sm'}`}>
                      {m.text}
                    </div>
                  </div>
                ))}
                {isTyping && <p className="text-xs text-gray-400">Typing...</p>}
                <div ref={chatEndRef} />
              </div>

              {/* Input */}
              <div className="p-3 border-t flex space-x-2">
                <textarea
                  value={inputMessage}
                  onChange={e => setInputMessage(e.target.value)}
                  onKeyDown={handleKeyPress}
                  placeholder="Type your question..."
                  className="flex-1 border rounded-lg px-2 py-1 text-sm resize-none"
                  rows={1}
                />
                <button onClick={sendMessage} disabled={!inputMessage.trim()} className="bg-green-600 text-white px-3 py-1 rounded-lg"> <Send size={16} /> </button>
              </div>
            </>
          )}
        </div>
      )}
    </>
  );
};

export default FloatingChatbot;
